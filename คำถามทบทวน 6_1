คำถามทบทวน

Docker vs Native Setup: อธิบายข้อดีของการใช้ Docker เปรียบเทียบกับการติดตั้ง ESP-IDF บน host system
หากต้องการ setup เร็ว, เสถียร, ทำงานเป็นทีม, ใช้ Docker จะเหมาะกว่า
หากต้องการ debug ลึก, performance ดี, เชื่อมต่อ hardware ง่าย, ใช้ Native จะดีกว่า
Build Process: อธิบายขั้นตอนการ build ของ ESP-IDF ใน Docker container ตั้งแต่ source code จนได้ binary 1.เข้า Docker container → docker-compose exec esp32-dev bash 2.โหลด environment ESP-IDF → source $IDF_PATH/export.sh 3.ตั้งเป้าหมาย hardware → idf.py set-target esp32 4.สร้าง build → idf.py build 5.ผลลัพธ์จะถูกสร้างในโฟลเดอร์ build/ เช่น .elf, .bin, .map

CMake Files: บทบาทของไฟล์ CMakeLists.txt แต่ละไฟล์คืออะไร และทำงานอย่างไรใน Docker environment?

CMakeLists.txt คือไฟล์หัวใจของการควบคุมการ build ใน ESP-IDF
มีหลายระดับ (root, main/, components/)
ใช้งานได้เหมือนกันทั้งใน Docker และ Native
Docker แค่เป็น "สภาพแวดล้อมแยก" ที่รันคำสั่งเหมือนเดิมกับเครื่องจริง
Git Ignore: ไฟล์ .gitignore มีความสำคัญอย่างไรสำหรับ ESP32 project development? ไฟล์ .gitignore มีความสำคัญมากสำหรับการพัฒนาโปรเจกต์ ESP32 เพราะช่วย ป้องกันไม่ให้ไฟล์ที่สร้างอัตโนมัติและไฟล์ชั่วคราว เช่น ไฟล์ build (*.bin, build/), ไฟล์ config เฉพาะเครื่อง (sdkconfig.old), หรือไฟล์ editor settings (.vscode/) ถูกเพิ่มเข้าสู่ Git repository ทำให้ repository สะอาดและมีขนาดเล็ก เพราะไม่เก็บไฟล์ที่ไม่จำเป็นหรือไฟล์ขนาดใหญ่ที่เปลี่ยนบ่อย ลดปัญหา conflict และความยุ่งยากในการทำงานร่วมกับทีม เพราะไฟล์ที่เฉพาะเครื่องหรือสร้างโดยระบบจะไม่ไปปะปนกับโค้ดหลัก ช่วยให้การ clone โปรเจกต์ไปเครื่องอื่นทำได้ง่ายและรวดเร็ว โดยไม่ต้องจัดการลบไฟล์ที่ไม่จำเป็น

Container Persistence: ข้อมูลใดบ้างที่จะหายไปเมื่อ restart container และข้อมูลใดที่จะอยู่ต่อ?

ข้อมูลที่ไม่ได้เก็บใน volume หรือ mount จะ หาย เมื่อ container ถูก restart หรือลบ
ข้อมูลที่เก็บใน volume หรือ mount ออกมา จะ อยู่ต่อ แม้ container จะถูก restart หรือ recreate ใหม่
Development Workflow: เปรียบเทียบ workflow การพัฒนาระหว่างการใช้ Docker กับการทำงานบน native system Docker Native System
ติดตั้งง่าย ไม่ยุ่งยาก + ประสิทธิภาพสูงกว่าเล็กน้อย
ลดปัญหา environment ต่างกันในทีม + เข้าถึงฮาร์ดแวร์และ debugging สะดวก
เหมาะกับ automation, CI/CD + เหมาะกับการพัฒนาระยะยาวและ debug ละเอียด – ต้องตั้งค่า USB passthrough – อาจเจอปัญหาการติดตั้ง dependency – อาจ debug ยากกว่าในบางกรณี – ต้องดูแล environment ให้ดี
